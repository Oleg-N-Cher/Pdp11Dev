MODULE [noinit] MK90; IMPORT SYSTEM;

PROCEDURE CLS*; (** Clear screen *)
BEGIN (*@
  asm("\
    MOV  $0x200, R0   \n\
    MOV  $0x1E0, R1   \n\
1$: CLR  (R0)+        \n\
    SOB  R1, 1$       \n"
  );
*)
END CLS;

PROCEDURE PIXEL*;
(* expects the pixel's X coordinate in R0, Y coordinate in R1
   returns the offset in the screen buffer in R1 and the bit mask in R2
*)
BEGIN (*@
  asm("\
    MOV  $0x4000, R2  \n\
    BIT  $0x20, R1    \n\
    BNE  0$           \n\
    SWAB R2           \n\
0$: MOV  R0, -(SP)    \n\
    BIC  $0xFFF8, R0  \n\
    NEG  R0           \n\
    INC  R0           \n\
    ASH  R0, R2       \n\
    MOV  (SP)+, R0    \n\
    ASR  R0           \n\
    ASR  R0           \n\
    BIC  $1, R0       \n\
    BIC  $0xFFE0, R1  \n\
    MUL  $0x1E, R1    \n\
    ADD  R0, R1       \n"
  );
*)
END PIXEL;

PROCEDURE PSET* (x, y: INT16); (** Plot a pixel *)
BEGIN (*@
  asm("\
    MOV  %0, R0           \n\
    MOV  %1, R1           \n\
    JSR  PC, _MK90_PIXEL  \n\
    BIS  R2, 0x200(R1)    "
  ::"g"(x), "g"(y):"r2"
  );
*)
END PSET;

(** Draw a line using the Bresenham's algorithm *)
PROCEDURE LINE* (x0, y0, x1, y1: INT16);
(*  R0 = X0 then later X
    R1 = Y0 then later Y
    R2 = X1
    R3 = Y1
*)
BEGIN (*@
  asm("\
        MOV  %0, R0          \n\
        MOV  %1, R1          \n\
        MOV  %2, R2          \n\
        MOV  %3, R3          \n\
        MOV  R5, -(SP)       \n\
        MOV  R3, R4          \n\
        SUB  R1, R4          \n\
        BCC  LINE1           \n\
        NEG  R4              \n\
LINE1:  MOV  R2, R5          \n\
        SUB  R0, R5          \n\
        BCC  LINE2           \n\
        NEG  R5              \n\
LINE2:  SUB  R4, R5          \n\
        BPL  LINE3           \n\
        JSR  PC, SWAP01      \n\
        JSR  PC, SWAP23      \n\
LINE3:  CMP  R2, R0          \n\
        BPL  LINE4           \n\
        MOV  R0, R4          \n\
        MOV  R2, R0          \n\
        MOV  R4, R2          \n\
        MOV  R1, R4          \n\
        MOV  R3, R1          \n\
        MOV  R4, R3          \n\
LINE4:  MOV  R2, -(SP)       \n\
        SUB  R0, R2          \n\
        MOV  $1, -(SP)       \n\
        SUB  R1, R3          \n\
        BPL  LINE5           \n\
        NEG  (SP)            \n\
        NEG  R3              \n\
LINE5:  MOV  R2,R4           \n\
        ASR  R4              \n\
LINE6:  JSR  PC, SWAP1       \n\
        MOV  R0, -(SP)       \n\
        MOV  R1, -(SP)       \n\
        MOV  R2, -(SP)       \n\
        JSR  PC, _MK90_PIXEL \n\
        BIS  R2, 0x200(R1)   \n\
        MOV  (SP)+, R2       \n\
        MOV  (SP)+, R1       \n\
        MOV  (SP)+, R0       \n\
        JSR  PC, SWAP1       \n\
        SUB  R3, R4          \n\
        BPL  LINE7           \n\
        ADD  (SP), R1        \n\
        ADD  R2, R4          \n\
LINE7:  INC  R0              \n\
        CMP  2(SP), R0       \n\
        BCC  LINE6           \n\
        ADD  $4, SP          \n\
        BR   DONE            \n\
SWAP1:  TST  R5              \n\
        BPL  SWAP2           \n\
SWAP01: MOV  R0, -(SP)       \n\
        MOV  R1, R0          \n\
        MOV  (SP)+, R1       \n\
SWAP2:  RTS  PC              \n\
SWAP23: MOV  R2, -(SP)       \n\
        MOV  R3, R2          \n\
        MOV  (SP)+, R3       \n\
        RTS  PC              \n\
DONE:   MOV  (SP)+, R5       \n"
  ::"g"(x0), "g"(y0), "g"(x1), "g"(y1)
  :"r2","r3","r4"
  );
*)
END LINE;

END MK90.
